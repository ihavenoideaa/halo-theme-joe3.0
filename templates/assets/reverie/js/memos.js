// ‰ΩøÁî®‰ªé HTML ‰∏≠Ê≥®ÂÖ•ÁöÑÂÖ®Â±ÄÂèòÈáè
const memosHost = memosConfig.memosHost.endsWith("/") ? 
                memosConfig.memosHost:memosConfig.memosHost + "/";
const memosBlockHeight = memosConfig.memosBlockHeight;
const memosPageSize = memosConfig.memosPageSize > 20 ? memosConfig.memosPageSize : 20;
const memosLinkShow = memosConfig.memosLinkShow;

marked.setOptions({
    breaks: true // Â∞Ü \n Ëß£Êûê‰∏∫ <br>
});

const TAG_REG = /(?<=^|\s)#([^\s#]+)(?=\s|$)/g;
const HTML_REG = /```__html([\s\S]*?)```/gm;

document.addEventListener('DOMContentLoaded', async () => { // DOM Âä†ËΩΩÂêéÊâßË°å
              
    const config = {  // ÈÖçÁΩÆÂèÇÊï∞ÔºàÂèØ‰ªé‰∏ªÈ¢òÈÖçÁΩÆËé∑ÂèñÔºâ
      enableEffect: true,    // ÊòØÂê¶ÂêØÁî®Âä®ÁîªÊïàÊûú
      dateFormat: 'yyyy/MM/dd HH:mm:ss', // Êó∂Èó¥Ê†ºÂºè
      scrollThreshold : 100
    };

    let all_memos = [];
    var host_url = memosHost + 'api/v1/memos?pageSize=' + memosPageSize + '&pageToken=';
    var page_token = '';
    let isLoading = false; // Èò≤Ê≠¢ÈáçÂ§çÂä†ËΩΩ

    // ÂàùÊ¨°Ëé∑ÂèñÊï∞ÊçÆ intiLoad()
    const intiLoad = async () => {
        try {
            const response = await fetch(host_url);
            const { memos, nextPageToken } = await response.json(); //Ëé∑ÂèñmemosÂíånextPageToken
            document.getElementById('memos_container').innerHTML = ''; // Ê∏ÖÁ©∫ÂÆπÂô®
            all_memos = memos;
            page_token = nextPageToken;
            loadData();

        } catch (error) {
            console.error('Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•:', error);
        }
    };

    //Ê∏≤Êüì‰ª•ÂèäÈ¢ÑËé∑Âèñ‰∏ã‰∏ÄÈÉ®ÂàÜÊï∞ÊçÆ loadData()
    const loadData = async () => {
      if (isLoading) return;
      isLoading = true;

      renderMemos();
      
        if(page_token != '') {
            let token_url = host_url + page_token;
            try {
                const response = await fetch(token_url);
                const { memos, nextPageToken } = await response.json();
                all_memos = [...all_memos, ...memos]; // ËøΩÂä†È¢ÑÂä†ËΩΩÁöÑÊï∞ÊçÆ
                page_token = nextPageToken;

            } catch (error) {
                console.error('È¢ÑÂä†ËΩΩÂ§±Ë¥•:', error);
            } finally {
                isLoading = false;
            }
        }
    };
    

    // Ê∏≤ÊüìÂä®ÊÄÅÂàóË°®
    const renderMemos = () => {
      const container = document.getElementById('memos_container');
      
      const currentItemCount = container.children.length;
      const newData = all_memos.slice(currentItemCount); // Âè™Ëé∑ÂèñÊñ∞Â¢ûÊï∞ÊçÆ
      
      newData.forEach((memo, index) => {
        const item = document.createElement('li');
        item.className = `joe_momos_item ${config.enableEffect ? 'animated wow' : ''}`;
        item.setAttribute('data-wow-delay', `0.${index}s`);
        item.setAttribute('data-cid', "memo.creator");
        item.innerHTML = `
          <!-- ÂèëÂ∏ÉÊó∂Èó¥ -->
        <p class="joe_memos_date">
            <i class="joe-font joe-icon-feather"></i>
            <em>
                ${formatDate(memo.createTime, config.dateFormat)}
            </em>
        </p>

        <!-- ÂÜÖÂÆπÂå∫Âùó -->
        <div class="joe_memos_block">
            <div class="joe_memos_body" 
                style="max-height: ${memosBlockHeight}px">
                <div class="content-wrp">
                    ${renderContent(memo)}
                </div>
            </div>
            <div class="joe_memos_footer">
                <div class="memos_res">
                    ${renderFooter(memo)}
                </div>
            </div>
        </div>
        `;
        container.appendChild(item); // ËøΩÂä†Êñ∞Êï∞ÊçÆ
      });
    }

    // ÂÜÖÂÆπÊ∏≤ÊüìÂáΩÊï∞
    const renderContent = (memo) => {
        //markdownËØ≠Ê≥ïÊ∏≤Êüì
        var memoContREG = memo.content.replace(TAG_REG,   //tag#ÂåπÈÖç
            "<span><a class='memos-tag' rel='noopener noreferrer' href='"
                + memosHost +"?filter=tagSearch:$1' target='_blank' rel='noopener noreferrer'>#$1</a></span>")
            .replace(HTML_REG, "$1");   //ÂåπÈÖç```__html```
            
            memoContREG = marked.parse(memoContREG);
            
        //ËµÑÊ∫êÊ∏≤Êüì
        let mediaContent = '';
        if (memo.resources?.length) {
            mediaContent = memo.resources.map(res => {
            if (res.type.startsWith('image/')) {
                return `<img class="memos_img lazyload" src="/${res.name}" alt="${res.filename}" 
                        onerror="Joe.errorImg(this, 'LoadFailedImg')">`;
            }
            if (res.type.startsWith('video/')) {
                return `<joe-dplayer src="/${res.name}"></joe-dplayer>`;
            }
            return '';
            }).join('');
        }
        return `<div class="marked-content">${memoContREG}</div>${mediaContent}`;
    };

    //Ê∏≤Êüìreaction
    const renderFooter = (memo) => {
        var memoReactions = memo.reactions;

        const typeCount = memoReactions.reduce((acc, item) => {
            const type = item.reactionType;
            acc[type] = (acc[type] || 0) + 1; // ÁªüËÆ°Êï∞Èáè
            return acc;
        }, {});
        var result = '';
        Object.keys(typeCount).forEach((type) => {
            result += `<div class="memos_reaction">
                <span>${type}</span>
                <span style="opacity:.6">${typeCount[type]}</span></div>`;
        });
        
        //ËØÑËÆ∫Êï∞ÈáèÊòæÁ§∫
        let commentCount = memo.relations.filter(item => item.type === 'COMMENT').length;
        result += `<div class="memos_relation" title="${commentCount}Êù°ËØÑËÆ∫">
            üí¨ <i>${commentCount}</i>
        </div>`;
        if(memosLinkShow) {
            let memo_url = memosHost + memo.name;
            result +=`<div class="memos_link_tag">
                <a title="ÂâçÂæÄ Memos" href="${memo_url}" target="_blank" rel="noopener noreferrer">
                <i class="joe-font joe-icon-link font-link-tag"></i></a></div>`
        }

        return result;
    };

    // ÊªöÂä®Âä†ËΩΩÈÄªËæë
    const handleScroll = () => {
        const { scrollTop, scrollHeight, clientHeight } = document.documentElement;
        if (scrollTop + clientHeight >= scrollHeight - config.scrollThreshold) {
            loadData(); // Âä†ËΩΩ‰∏ã‰∏ÄÈ°µ
        }
    };
    
    // ÁõëÂê¨ÊªöÂä®‰∫ã‰ª∂ÔºàÈò≤ÊäñÂ§ÑÁêÜÔºâ
    window.addEventListener('scroll', debounce(handleScroll, 100));

    intiLoad();
});

// Èò≤ÊäñÂáΩÊï∞
const debounce = (func, delay) => {
    let timeout;
    return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), delay);
    };
};

// Êó∂Èó¥Ê†ºÂºèÂåñÂáΩÊï∞
const formatDate = (isoString, format) => {
    const now = new Date();
    const date = new Date(isoString);
    const diffInSeconds = Math.floor((now - date) / 1000);

    // Áõ∏ÂØπÊó∂Èó¥Âà§Êñ≠
    if (diffInSeconds < 60) {
        return 'ÂàöÂàö';
    }
    if (diffInSeconds < 3600) {
        const minutes = Math.floor(diffInSeconds / 60);
        return `${minutes} ÂàÜÈíüÂâç`;
    }
    if (diffInSeconds < 86400) {
        const hours = Math.floor(diffInSeconds / 3600);
        return `${hours} Â∞èÊó∂Ââç`;
    }
    if (diffInSeconds < 172800) { // 48 Â∞èÊó∂ÂÜÖ
        return 'Êò®Â§©';
    }
    if (diffInSeconds < 604800) { // 7 Â§©ÂÜÖ
        const days = Math.floor(diffInSeconds / 86400);
        return `${days}Â§©Ââç`;
    }

    // Ë∂ÖËøá‰∏ÄÂë®ÊòæÁ§∫ÂÖ∑‰ΩìÊó∂Èó¥
    return format.replace(/yyyy|MM|dd|HH|mm|ss/g, tag => ({
        yyyy: date.getFullYear(),
        MM: String(date.getMonth() + 1).padStart(2, '0'),
        dd: String(date.getDate()).padStart(2, '0'),
        HH: String(date.getHours()).padStart(2, '0'),
        mm: String(date.getMinutes()).padStart(2, '0'),
        ss: String(date.getSeconds()).padStart(2, '0')
    })[tag]);
};






